#pragma version >=0.2.0;

#include "imports/stdlib.fc";
#include "jetton_wallet/error-codes.func";
#include "jetton_wallet/op-codes.func";
#include "jetton_wallet/params.func";
#include "jetton_wallet/storage.func";
#include "jetton_wallet/utils.func";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
	if (in_msg_body.slice_empty?()) {
		return ();
	}

	slice cs = in_msg_full.begin_parse();
	int flags = cs~load_uint(4);

	if (flags & 1) {
		in_msg_body~skip_bits(32);
		(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_storage();
		int op = in_msg_body~load_uint(32);

		throw_unless(709, (op == internal_transfer) | (op == burn_notification));

		in_msg_body~load_uint(64);
		int token_amount = in_msg_body~load_coins();
		balance += token_amount;

		save_storage(balance, owner_address, jetton_master_address, jetton_wallet_code);

		return ();
	}

	slice sender_address = cs~load_msg_addr();

	cs~load_msg_addr(); ;; skip dst
	cs~load_coins();    ;; skip value
	cs~skip_bits(1);    ;; skip extracurrency collection
	cs~load_coins();    ;; skip ihr_fee

	int fwd_fee = cs~load_coins();
	int op = in_msg_body~load_uint(32);

	if (op == 0xb26205fc) {
		int query_id = in_msg_body~load_uint(64);
		in_msg_body~load_coins();
		slice to_owner_address = in_msg_body~load_msg_addr();

		force_chain(WORKCHAIN, to_owner_address);

		(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_storage();

		cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
		slice to_wallet_address = calculate_jetton_wallet_address(state_init);

		slice response_address = in_msg_body~load_msg_addr();
		cell custom_payload = in_msg_body~load_dict();
		int forward_ton_amount = in_msg_body~load_coins();

		slice either_forward_payload = in_msg_body;

		cell msg = begin_cell()
			.store_uint(0x10, 6) ;; No bounce
			.store_slice(to_wallet_address)
			.store_coins(forward_ton_amount)
  			.store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
			.store_ref(state_init)
			.store_ref(begin_cell()
				.store_uint(transfer_notification, 32)
				.store_uint(query_id, 64)
				.store_coins(0)
				.store_slice(owner_address)
				.store_slice(response_address)
				.store_coins(0)
				.store_slice(either_forward_payload)
				.end_cell())
			.end_cell();

		send_raw_message(msg, 64);

		return();
	}

	if (op == transfer) {
		int query_id = in_msg_body~load_uint(64);
		int token_amount = in_msg_body~load_coins();
		in_msg_body~load_msg_addr();
		slice response_address = in_msg_body~load_msg_addr();
		cell custom_payload = in_msg_body~load_dict();
		int forward_ton_amount = in_msg_body~load_coins();

		int ton_balance_before_msg = my_balance - msg_value;
		int storage_fee = REQUIRED_TON_RESERVE - min(ton_balance_before_msg, REQUIRED_TON_RESERVE);
		msg_value -= (storage_fee + REQUIRED_GAS);

		(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_storage();

		if (equal_slices(sender_address, owner_address)) {
			balance -= token_amount;

			cell msg = begin_cell()
				.store_uint(0x10, 6) ;; No bounce
				.store_slice(response_address)
				.store_coins(token_amount)
				.store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
				.end_cell();

			send_raw_message(msg, 2);
		}

		elseif (forward_ton_amount) {
			balance += token_amount;
			msg_value -= (token_amount + forward_ton_amount + fwd_fee);

			slice either_forward_payload = in_msg_body;

			cell msg = begin_cell()
				.store_uint(0x10, 6) ;; No bounce
				.store_slice(owner_address)
				.store_coins(forward_ton_amount)
				.store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
				.store_ref(begin_cell()
					.store_uint(transfer_notification, 32)
					.store_uint(query_id, 64)
					.store_coins(token_amount)
					.store_slice(response_address)
					.store_slice(either_forward_payload)
					.end_cell())
				.end_cell();

			send_raw_message(msg, 1);

			if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
				cell msg = begin_cell()
					.store_uint(0x10, 6)
					.store_slice(response_address)
					.store_coins(msg_value)
					.store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
					.store_uint(excesses, 32)
					.store_uint(query_id, 64)
					.end_cell();
				
				send_raw_message(msg, 2);
			}
		}

  		save_storage(balance, owner_address, jetton_master_address, jetton_wallet_code);

		return();
	}

	throw(UNSUPPORTED_OP);
}

(int, slice, slice, cell) get_wallet_data() method_id {
	return load_storage();
}